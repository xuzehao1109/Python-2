#进阶1 基础查询 
/*
#select * from 表名
#select 查询列表
查询列表可以是 ：表中字段 常量 表达式 函数 
 查询结果是 一个虚拟的
 
 */
 USE employees;
 #查询单个
 SELECT last_name FROM employees;
 
 #查询多个
  SELECT last_name,salary,email FROM employees;
  
#查询所有字段
 SELECT * FROM employees;

SELECT VERSION()

#起别名 可以区分别名 
SELECT 199%98 AS 结果；
SELECT last_name AS 姓 FROM employees;
SELECT last_name 姓 ,`phone_number` 电话  FROM employees;
SELECT salary AS 'out put' FROM employees;

#去重
#案例查询部门编号
SELECT department_id FROM employees;
SELECT DISTINCT department_id FROM employees;

#+ 加号的案例
/*
加号只有运算功能
select 100+99
select '123'+90:其中一方为字符型 试图转换为数值型
		转换成功 做加法运算
		转换失败 字符型转换为0 继续做加法运算
		一个为null 结果为null

*/
# 案例 ：员工名和姓连接成一个字段
SELECT 
  CONCAT(last_name, `first_name`) AS 姓名 
FROM
  employees ;
  
  #显示出表employees的全部列，各个列之间用逗号连接，列头显示成OUT_PUT
  
  #用 ifnull 函数

SELECT 
	IFNULL(commission_pct,0) AS 奖金率,
	commission_pct
FROM 
	employees;
	
	
#-------------------------------------------

SELECT
	CONCAT(`first_name`,',',`last_name`,',',`job_id`,',',IFNULL(commission_pct,0)) AS out_put
FROM
	employees;


#进阶2 条件查询 
/*\
select                          顺序
		查询列表          3
from 
		表名              1
where
		筛选条件          2
		

分类： 按条件表达式筛选  ：>  <  !=  <>  <=   >=

       按逻辑表达式筛选 ：and or  not 
       模糊查询：  like 
		   between and 
		   in 
		   is null 
		   
*/
#案例查询工资大于12000
SELECT 
  first_name ,last_name ,email ,phone_number ,job_id ,salary ,IFNULL(commission_pct, 0) ,IFNULL(manager_id,0),department_id,hiredate
FROM
  employees 
WHERE salary > 12000 ;

#案例 查询部门不等于90号且工资小于12000的员工名的部门编号
SELECT 
  last_name,
  department_id,
  salary 
FROM
  employees 
WHERE department_id != 90 AND salary <=12000 ;



################################################## ####################
＃¥##############现转为用笔记本记录笔记########################### ######
#################此项目暂不更新############################ ############
#按逻辑表达式筛选
#用于连接条件表达式
SELECT 
  `first_name` 
FROM
  `employees` 
WHERE `department_id` < 90 
  OR `department_id` > 100 ;

#模糊查询
#1 like  特点 一般和通配符搭配 
#通配符 % 代表任意字符包含0个字符 
#       _任意单个字符
#案例1 查询员工名字中包含a
SELECT 
  * 
FROM
  employees 
WHERE last_name LIKE '%a%' ;

#案例2 查询员工名中第三个字符为n 第五个字符为l的员工和工资
SELECT 
  last_name,
  salary 
FROM
  employees 
WHERE last_name LIKE '__n_l%' ;

#案例3 查询员工名第二个字符为_的员工
SELECT 
  last_name 
FROM
  employees 
WHERE last_name LIKE '_\_%' 
#或者 where last_name like '_&_%' escape '&'
  #2 between and 
  #使用between and 可以试代码简洁 包含临界值  大小顺序不可以颠倒 
  #案例1 查询员工编号在100-120之间
  SELECT 
    * 
  FROM
    employees 
  WHERE employee_id >= 100 
    AND employee_id <= 120 ;
#-----------------------------------------
SELECT 
  * 
FROM
  employees 
WHERE employee_id BETWEEN 100 
  AND 120 ;

# 3 in 
# 案例 查询员工工种编号是 it_prog AD_PRES AD_VP
#判断某字符是否属于in中的某一项
#in 列表的类型必须一致或者兼容
#'123'--123
#不可在in中用通配符
SELECT 
  last_name,
  job_id 
FROM
  employees 
WHERE job_id IN ('AD_PRES', ' AD_VP') 
#4 is null 
#不能用=判断null
#案例1 查询没有奖金的员工名和奖金率

  SELECT 
    last_name,
    commission_pct 
  FROM
    employees 
  WHERE commission_pct IS NULL ;
    SELECT 
      last_name,
      commission_pct 
    FROM
      employees 
    WHERE commission_pct IS NOT NULL ;
    
    
#安全等于 <=>
#可以判断null
SELECT 
  last_name,
  commission_pct 
FROM
  employees 
WHERE commission_pct <=> NULL 
#案例2 查询工资为12000
  SELECT 
    last_name,
    commission_pct,
    salary 
  FROM
    employees 
  WHERE salary <=> 12000 ;
#案例3 查询工号为176的员工姓名部门和年薪
SELECT 
  last_name ,
  department_id ,
  salary * 12 *(1+ IFNULL(commission_pct,0 )) AS 年薪 
FROM
  employees ;
SELECT *FROM employees WHERE job_id LIKE '%T%' ORDER BY department_id DESC ;
#进阶4 常用函数
/*
将一组逻辑语句封装
调用 select 函数名（实参列表） from 表；


单行函数 ：concat  length ifnull
分组函数 做统计使用 


单行函数：字符函数 数学函数 日期函数 其他函数 流程控制函数



*/

#字符函数
#length 获取字节长度
SELECT `first_name`,LENGTH(`first_name`) AS 名字长度 FROM employees
#concat 拼接字符串
SELECT CONCAT (last_name,first_name) FROM employees;
# upper lower 
#案例 将姓变大写 名变小写
SELECT CONCAT (UPPER(first_name),LOWER(last_name)) FROM employees;

#substr 截取字符串
#从索引开始的长度
 SELECT SUBSTR( '李莫愁爱上了陆展元',7) 
#制定字节长度
SELECT SUBSTR('李莫愁爱上了陆展元',1,3)
#案例 姓名中首字符大写 其他小写 再显示
SELECT CONCAT (UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2))) FROM employees

# instr
#返回子串第一次出现的索引
SELECT INSTR('老鼠爱上大米','大米')

SELECT INSTR('老鼠大米爱上大米','大')

#trim
SELECT TRIM ('    abcd   y ') AS p

# lpad 左填充   rpad 右填充
SELECT LPAD ('大米',10,'*')  AS  ooo 


#replace 替换
SELECT REPLACE('大米小米大米','大米','aa')


#数学函数
#round 四舍五入
SELECT ROUND(-1.555)
SELECT ROUND (1.568,2)


#ceil 向上取整
  SELECT CEIL (1.56)
  SELECT CEIL(-1.001)
  
#floor 向下取整
 SELECT FLOOR(-9.9)
 
 #truncate  截断  只要
 SELECT TRUNCATE(1.68,1)
 
 #mod 取余 等同于%
 
 SELECT MOD (10,3)


#日期函数

#用于对日期处理 或者返回日期

#now 返回当前日期时间

SELECT NOW()

#curdate  返回日期 没有时间

SELECT CURDATE()

#curtime  返回时间 没有时间

SELECT CURTIME()

#获取 年月日小时分针秒
SELECT YEAR(NOW())
SELECT YEAR('1998-1-1')
SELECT YEAR(hiredate) FROM employees


SELECT MONTH(NOW())
SELECT MONTHNAME(NOW())
 
 #str_to_date 通过指定 的格式
 
 SELECT STR_TO_DATE('1998-8-2','%Y-%c-%d')
 
 
 #案例  查询入职日期为1992-4-3
 #默认  
SELECT * FROM employees WHERE hiredate ='1992-4-3'

SELECT *FROM employees WHERE hiredate=STR_TO_DATE('1992-4-3','%Y-%c-%d')


#date_format 将日期转换成字符

SELECT DATE_FORMAT(NOW(),'%Y年%m月%d日')

#查询有奖金的员工名和入职日期 （xx月-xx日-xx年）
SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日/%y年')
FROM employees
WHERE commission_pct IS NOT NULL


#其他函数  
SELECT  VERSION()
SELECT DATABASE()
SELECT USER()

#流程控制函数

#if  ： if else 的效果

SELECT IF ('10>5','大','小') 结果

SELECT last_name,commission_pct,IF (commission_pct IS NULL,'haha ','hehe') FROM employees

#case 函数
#使用一：
# case
# when 常亮1 then 值或者语句1;
#.......
#else 要显示的值或者语句n；

#案例 查询员工的工资
#要求 部门号=30 工资1.1倍
# 部门号=40 工资1.2倍
#  部门号=50 工资1.3倍
SELECT salary  原始工资,department_id,
CASE department_id
WHEN 30 THEN salary*1.1
WHEN 40 THEN salary*1.2
WHEN 50 THEN salary*1.3
ELSE salary
END AS 新工资
FROM employees

#案例2 case 多重 if 
#case
#when 条件1 then 要显示的值1或者语句
#when 条件2 then 要显示的值2或者语句
#。。。。。
#else 要显示的值N或者语句
#end

#查询员工的工资情况
#如果工资大于20000显示A
#大于15000            B
#大于10000            C
#其他                 D

SELECT salary,
CASE
WHEN salary>20000 THEN 'a'
WHEN salary>15000 THEN 'B'
WHEN salary>10000 THEN 'c'
ELSE 'd'
END AS 等级
FROM employees


##########################
SELECT CONCAT(last_name,'earns',salary,'want',salary*3)
FROM employees
WHERE salary=24000


#分组函数

/*
分类 sum求和
   avg 平均
   max
   min
   count











*/

#简单使用

SELECT SUM(salary) FROM employees;
SELECT AVG(salary)FROM employees;
SELECT MAX(salary)FROM employees;
SELECT COUNT(salary) FROM employees;

SELECT SUM(salary),ROUND(AVG(salary),1) FROM employees


#特点 ： 分组函数 的参数类型支持哪些类型：
#sum  avg 一般只用于处理数值型
#max min count 处理任何类型
#分组函数都忽略null  sum  avg  max min count
#可以和 distinct
SELECT SUM(last_name),AVG(last_name) FROM employees

SELECT MAX(last_name) FROM employees
#有null
SELECT COUNT(commission_pct) FROM employees
#是否忽略null
SELECT SUM(commission_pct),AVG(commission_pct)FROM employees

#和distinct
SELECT SUM(DISTINCT salary),SUM(salary) FROM employees
