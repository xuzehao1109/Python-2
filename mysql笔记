#进阶1 基础查询 
/*
#select * from 表名
#select 查询列表
查询列表可以是 ：表中字段 常量 表达式 函数 
 查询结果是 一个虚拟的
 
 */
 USE employees;
 #查询单个
 SELECT last_name FROM employees;
 
 #查询多个
  SELECT last_name,salary,email FROM employees;
  
#查询所有字段
 SELECT * FROM employees;

SELECT VERSION()

#起别名 可以区分别名 
SELECT 199%98 AS 结果；
SELECT last_name AS 姓 FROM employees;
SELECT last_name 姓 ,`phone_number` 电话  FROM employees;
SELECT salary AS 'out put' FROM employees;

#去重
#案例查询部门编号
SELECT department_id FROM employees;
SELECT DISTINCT department_id FROM employees;

#+ 加号的案例
/*
加号只有运算功能
select 100+99
select '123'+90:其中一方为字符型 试图转换为数值型
		转换成功 做加法运算
		转换失败 字符型转换为0 继续做加法运算
		一个为null 结果为null

*/
# 案例 ：员工名和姓连接成一个字段
SELECT 
  CONCAT(last_name, `first_name`) AS 姓名 
FROM
  employees ;
  
  #显示出表employees的全部列，各个列之间用逗号连接，列头显示成OUT_PUT
  
  #用 ifnull 函数

SELECT 
	IFNULL(commission_pct,0) AS 奖金率,
	commission_pct
FROM 
	employees;
	
	
#-------------------------------------------

SELECT
	CONCAT(`first_name`,',',`last_name`,',',`job_id`,',',IFNULL(commission_pct,0)) AS out_put
FROM
	employees;


#进阶2 条件查询 
/*\
select                          顺序
		查询列表          3
from 
		表名              1
where
		筛选条件          2
		

分类： 按条件表达式筛选  ：>  <  !=  <>  <=   >=

       按逻辑表达式筛选 ：and or  not 
       模糊查询：  like 
		   between and 
		   in 
		   is null 
		   
*/
#案例查询工资大于12000
SELECT 
  first_name ,last_name ,email ,phone_number ,job_id ,salary ,IFNULL(commission_pct, 0) ,IFNULL(manager_id,0),department_id,hiredate
FROM
  employees 
WHERE salary > 12000 ;

#案例 查询部门不等于90号且工资小于12000的员工名的部门编号
SELECT 
  last_name,
  department_id,
  salary 
FROM
  employees 
WHERE department_id != 90 AND salary <=12000 ;



################################################## ####################
＃¥##############现转为用笔记本记录笔记########################### ######
#################此项目暂不更新############################ ############
#按逻辑表达式筛选
#用于连接条件表达式
SELECT 
  `first_name` 
FROM
  `employees` 
WHERE `department_id` < 90 
  OR `department_id` > 100 ;

#模糊查询
#1 like  特点 一般和通配符搭配 
#通配符 % 代表任意字符包含0个字符 
#       _任意单个字符
#案例1 查询员工名字中包含a
SELECT 
  * 
FROM
  employees 
WHERE last_name LIKE '%a%' ;

#案例2 查询员工名中第三个字符为n 第五个字符为l的员工和工资
SELECT 
  last_name,
  salary 
FROM
  employees 
WHERE last_name LIKE '__n_l%' ;

#案例3 查询员工名第二个字符为_的员工
SELECT 
  last_name 
FROM
  employees 
WHERE last_name LIKE '_\_%' 
#或者 where last_name like '_&_%' escape '&'
  #2 between and 
  #使用between and 可以试代码简洁 包含临界值  大小顺序不可以颠倒 
  #案例1 查询员工编号在100-120之间
  SELECT 
    * 
  FROM
    employees 
  WHERE employee_id >= 100 
    AND employee_id <= 120 ;
#-----------------------------------------
SELECT 
  * 
FROM
  employees 
WHERE employee_id BETWEEN 100 
  AND 120 ;

# 3 in 
# 案例 查询员工工种编号是 it_prog AD_PRES AD_VP
#判断某字符是否属于in中的某一项
#in 列表的类型必须一致或者兼容
#'123'--123
#不可在in中用通配符
SELECT 
  last_name,
  job_id 
FROM
  employees 
WHERE job_id IN ('AD_PRES', ' AD_VP') 
#4 is null 
#不能用=判断null
#案例1 查询没有奖金的员工名和奖金率

  SELECT 
    last_name,
    commission_pct 
  FROM
    employees 
  WHERE commission_pct IS NULL ;
    SELECT 
      last_name,
      commission_pct 
    FROM
      employees 
    WHERE commission_pct IS NOT NULL ;
    
    
#安全等于 <=>
#可以判断null
SELECT 
  last_name,
  commission_pct 
FROM
  employees 
WHERE commission_pct <=> NULL 
#案例2 查询工资为12000
  SELECT 
    last_name,
    commission_pct,
    salary 
  FROM
    employees 
  WHERE salary <=> 12000 ;
#案例3 查询工号为176的员工姓名部门和年薪
SELECT 
  last_name ,
  department_id ,
  salary * 12 *(1+ IFNULL(commission_pct,0 )) AS 年薪 
FROM
  employees ;
SELECT *FROM employees WHERE job_id LIKE '%T%' ORDER BY department_id DESC ;
#进阶4 常用函数
/*
将一组逻辑语句封装
调用 select 函数名（实参列表） from 表；


单行函数 ：concat  length ifnull
分组函数 做统计使用 


单行函数：字符函数 数学函数 日期函数 其他函数 流程控制函数



*/

#字符函数
#length 获取字节长度
SELECT `first_name`,LENGTH(`first_name`) AS 名字长度 FROM employees
#concat 拼接字符串
SELECT CONCAT (last_name,first_name) FROM employees;
# upper lower 
#案例 将姓变大写 名变小写
SELECT CONCAT (UPPER(first_name),LOWER(last_name)) FROM employees;

#substr 截取字符串
#从索引开始的长度
 SELECT SUBSTR( '李莫愁爱上了陆展元',7) 
#制定字节长度
SELECT SUBSTR('李莫愁爱上了陆展元',1,3)
#案例 姓名中首字符大写 其他小写 再显示
SELECT CONCAT (UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2))) FROM employees

# instr
#返回子串第一次出现的索引
SELECT INSTR('老鼠爱上大米','大米')

SELECT INSTR('老鼠大米爱上大米','大')

#trim
SELECT TRIM ('    abcd   y ') AS p

# lpad 左填充   rpad 右填充
SELECT LPAD ('大米',10,'*')  AS  ooo 


#replace 替换
SELECT REPLACE('大米小米大米','大米','aa')


#数学函数
#round 四舍五入
SELECT ROUND(-1.555)
SELECT ROUND (1.568,2)


#ceil 向上取整
  SELECT CEIL (1.56)
  SELECT CEIL(-1.001)
  
#floor 向下取整
 SELECT FLOOR(-9.9)
 
 #truncate  截断  只要
 SELECT TRUNCATE(1.68,1)
 
 #mod 取余 等同于%
 
 SELECT MOD (10,3)


#日期函数

#用于对日期处理 或者返回日期

#now 返回当前日期时间

SELECT NOW()

#curdate  返回日期 没有时间

SELECT CURDATE()

#curtime  返回时间 没有时间

SELECT CURTIME()

#获取 年月日小时分针秒
SELECT YEAR(NOW())
SELECT YEAR('1998-1-1')
SELECT YEAR(hiredate) FROM employees


SELECT MONTH(NOW())
SELECT MONTHNAME(NOW())
 
 #str_to_date 通过指定 的格式
 
 SELECT STR_TO_DATE('1998-8-2','%Y-%c-%d')
 
 
 #案例  查询入职日期为1992-4-3
 #默认  
SELECT * FROM employees WHERE hiredate ='1992-4-3'

SELECT *FROM employees WHERE hiredate=STR_TO_DATE('1992-4-3','%Y-%c-%d')


#date_format 将日期转换成字符

SELECT DATE_FORMAT(NOW(),'%Y年%m月%d日')

#查询有奖金的员工名和入职日期 （xx月-xx日-xx年）
SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日/%y年')
FROM employees
WHERE commission_pct IS NOT NULL


#其他函数  
SELECT  VERSION()
SELECT DATABASE()
SELECT USER()

#流程控制函数

#if  ： if else 的效果

SELECT IF ('10>5','大','小') 结果

SELECT last_name,commission_pct,IF (commission_pct IS NULL,'haha ','hehe') FROM employees

#case 函数
#使用一：
# case
# when 常亮1 then 值或者语句1;
#.......
#else 要显示的值或者语句n；

#案例 查询员工的工资
#要求 部门号=30 工资1.1倍
# 部门号=40 工资1.2倍
#  部门号=50 工资1.3倍
SELECT salary  原始工资,department_id,
CASE department_id
WHEN 30 THEN salary*1.1
WHEN 40 THEN salary*1.2
WHEN 50 THEN salary*1.3
ELSE salary
END AS 新工资
FROM employees

#案例2 case 多重 if 
#case
#when 条件1 then 要显示的值1或者语句
#when 条件2 then 要显示的值2或者语句
#。。。。。
#else 要显示的值N或者语句
#end

#查询员工的工资情况
#如果工资大于20000显示A
#大于15000            B
#大于10000            C
#其他                 D

SELECT salary,
CASE
WHEN salary>20000 THEN 'a'
WHEN salary>15000 THEN 'B'
WHEN salary>10000 THEN 'c'
ELSE 'd'
END AS 等级
FROM employees


##########################
SELECT CONCAT(last_name,'earns',salary,'want',salary*3)
FROM employees
WHERE salary=24000


#分组函数

/*
分类 sum求和
   avg 平均
   max
   min
   count











*/

#简单使用

SELECT SUM(salary) FROM employees;
SELECT AVG(salary)FROM employees;
SELECT MAX(salary)FROM employees;
SELECT COUNT(salary) FROM employees;

SELECT SUM(salary),ROUND(AVG(salary),1) FROM employees


#特点 ： 分组函数 的参数类型支持哪些类型：
#sum  avg 一般只用于处理数值型
#max min count 处理任何类型
#分组函数都忽略null  sum  avg  max min count
#可以和 distinct
SELECT SUM(last_name),AVG(last_name) FROM employees

SELECT MAX(last_name) FROM employees
#有null
SELECT COUNT(commission_pct) FROM employees
#是否忽略null
SELECT SUM(commission_pct),AVG(commission_pct)FROM employees

#和distinct
SELECT SUM(DISTINCT salary),SUM(salary) FROM employees

# count 函数
#使用的最多
SELECT COUNT(salary) FROM employees
SELECT COUNT(*)FROM employees  #统计行数
SELECT COUNT(1) FROM employees #统计行数
SELECT COUNT('x')FROM employees
#效率问题 innodb count(1)和count(*)效率差不多
#         mysam count(*)效率最高
#一般使用count(*)统计行数


#和分组函数一起查询的字段有限制有要求
#一般要求是 group by后面的字段

SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary)FROM employees
SELECT MAX(hiredate)-MIN(hiredate) AS 天数 FROM employees#错误的
SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) FROM employees
SELECT COUNT(*) FROM employees WHERE department_id=90



#进阶五 分组查询
#查询每个部门的平均工资  group by 
/*
select 分组函数 ，列（要求在group by 后面）
 from
 where
 group by
 order by
 查询列表比较特殊

*/
#查询工种最高工资
SELECT MAX(salary),job_id
FROM employees
GROUP BY job_id

#案例2 查询每个位置上的部门个数
SELECT COUNT(*) ,location_id FROM departments GROUP BY location_id

#添加筛选条件
#案例1 查询邮箱里有a 每个部门的平均工资
SELECT AVG(salary),department_id
FROM employees 
WHERE email LIKE '%a%'
GROUP BY department_id


#案例2 查询有奖金的每个领导手下的最高工资
SELECT MAX(salary),manager_id
FROM employees
WHERE commission_pct IS NOT NULL
GROUP BY manager_id

#SELECT * FROM employees


#DML语言
#插入语
/*
insert into 表名 列名....可多个
values(值....)；
插入的值的类型要和插入的一致或者兼容







*/
SELECT * FROM beauty
INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)
VALUES(13,'尤','女','1990','199979',NULL,'2');

#可以为null的如何插入值
#不为null必须插入值
#方式1
INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)
VALUES(13,'尤','女','1990','199979',NULL,'2');
#方式2
INSERT INTO beauty(id,NAME,sex,borndate,phone,boyfriend_id)
VALUES(14,'尤尤','女','1990-08-17','199979','2');

#列的顺序可以调换   要和values对应
INSERT INTO beauty(NAME,id)
VALUES('哦','15')
#可以省略列名 默认所有列
#列的顺序和表中是一致的
INSERT INTO beauty
VALUES(19,'张飞','难',NULL,'119',NULL,'3')

#方式2 
INSERT INTO 
SET 列名=值

INSERT INTO beauty
SET id=20,NAME='尤星宇'

INSERT INTO beauty
SET id =21,sex='女'

#方式一支持一次插入多行
INSERT INTO beauty
VALUES(22,'张飞','难',NULL,'119',NULL,'3'),
(32,'张飞','难',NULL,'119',NULL,'3')
,(24,'张飞','难',NULL,'119',NULL,'3')

#方式2一次只能插入一行

#方式1支持子查询
INSERT INTO beauty(id,NAME,phone)
SELECT 26,'才','45646512'

INSERT INTO beauty(id,NAME,phone)
SELECT id,boyname ,'15478'FROM boys WHERE id <15

#修改语句
#修改单表
#修改多表

UPDATE SET
WHERE
#修改beauty中姓唐的电话
UPDATE beauty SET phone ='1385851111111'
WHERE NAME LIKE '%双%'
SELECT * FROM beauty

#修改多表
#update 表1 别名
INNER|LEFT|RIGHT|JOIN 表2 别名
ON 连接条件 
SET。。。。
WHERE。。。。


#案例 修改多表的记录
修改张无忌的女朋友的手机号114

UPDATE boys bo
INNER JOIN beauty b ON bo.id=b.boyfriend_id
SET b.phone='114'
WHERE bo.boyname='张无忌'
SELECT * FROM beauty	

修改没有男朋友的女生的男朋友的编号为2
UPDATE boys bo
RIGHT JOIN beauty b ON bo.id=b.boyfriend_id
SET b.boyfriend_id=2
WHERE bo.id IS NULL 

方式1 删除
DELETE FROM 表 WHERE 一删就是整行
可以单表也可以多表
DELETE 表1 表2
FROM 表1 
INNER LEFT RIGHT JOIN 表2 ON 连接条件
WHERE

方式2 多表杀出TRUNCATE TABLE 表名 不能加WHERE 清空删除

#方式1
DELETE FROM beauty WHERE phone LIKE '%9'
SELECT * FROM beauty

DELETE b FROM beauty b INNER JOIN boys bo 
ON b.boyfriend_id=bo.id
WHERE bo.boyName='张无忌'

SELECT *FROM beauty
SELECT * FROM boys

DELETE b,bo
FROM beauty b INNER JOIN boys bo 
ON b.boyfriend_id=bo.id
WHERE bo.boyName='黄晓明'

#方式2
TRUNCATE TABLE boys 

方式1和2的区别
DELETE 可以加WHERE
TRUNCATE 不能加
TRUNCATE效率高
TRUNCATE格式化删除 自增张值从1开始
DELETE有返回值，TRUNCATE无返回值
DELETE可以回滚，TRUNCATE不能回滚

#DDL语言 库和表的管理


创建修改删除
创建 CREATE     [IF NOT EXISTS]
修改 ALTER
删除 DROP

库的管理
库的创建
CREATE DATABASE 库名

CREATE DATABASE IF NOT EXISTS books

库的修改
更改库的字符集
ALTER DATABASE books CHARACTER SET gbk

库的删除
DROP  DATABASE IF EXISTS books 

表的管理
表的创建
CREATE TABLE 表名（列名 列的类型【(长度 可选) 约束】，
		   列名 列的类型【(长度 可选) 约束】）
CREATE DATABASE IF NOT EXISTS books

CREATE TABLE book(id INT,
	bname VARCHAR(20),
	price DOUBLE,
	authorID INT,
	piblishDate DATETIME)
DESC book

CREATE TABLE author(
		id INT,
		an_name VARCHAR(20)
)

表的修改
修改列名
修改列的类型和约束
添加列 删除列

#修改列名
ALTER TABLE book CHANGE COLUMN publishdate pubdate DATETIME

DESC book

#修改列的类型
ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP

#添加新列
ALTER TABLE  author ADD COLUMN annuall DOUBLE
DESC author

#删除列
ALTER TABLE author DROP COLUMN  annual

#修改表名字

ALTER TABLE author RENAME TO  book_author
DESC book_author

#表的删除
DROP TABLE 表名
DROP TABLE IF EXISTS book_author

SHOW TABLES



USE books
SHOW DATABASES

	TINYINT  SMALLINT MEDIUMINT  INT  BIGINT 
字节        1      2         3        4      8

#如何只是无符号和有符号
#unsigned 设置为无符号
#超出范围的值就是临界值
DROP TABLE IF EXISTS tab_int;
CREATE TABLE tab_int(
	t1 INT(7) ZEROFILL ,
	t2 INT UNSIGNED
	
)
DESC tab_int

INSERT INTO tab_int VALUES(-1254)
INSERT INTO tab_int VALUES(-12454,-1545)
INSERT INTO tab_int VALUES(9999999999,-1545)
INSERT INTO tab_int VALUES(9,-1545)
SELECT * FROM tab_int

浮点型 会根据插入的精度决定精度
FLOAT(M,D)
DOUBLE(M,D)

定点型
DEC(M,D)
M代表的是整数部位加小数部位
D代表小数部位
如果超过就插入临界值

DROP TABLE IF EXISTS tab_float;
CREATE TABLE tab_float(
		fi FLOAT(5,2)
		,f2 DOUBLE(5,2),
		f3 DEC(5,2)
	)

INSERT INTO tab_float VALUES(
	1523.4,1523.4,1523.4
)
SELECT * FROM tab_float

字符型
CHAR
VARCHAR

TEXT
BLOB()

CREATE TABLE tab_char(
		c1 ENUM('a','b','c')#枚举
	
	
	
)

INSERT INTO tab_char VALUES('a');
INSERT INTO tab_char VALUES('b');
INSERT INTO tab_char VALUES('c');
INSERT INTO tab_char VALUES('A');
INSERT INTO tab_char VALUES('m');

SELECT * FROM tab_char

CREATE TABLE tab_set(
	s1 SET('a','b','c')
)

INSERT INTO tab_set VALUES('a');
INSERT INTO tab_set VALUES('a,b,c');
INSERT INTO tab_set VALUES('c,v');
INSERT INTO tab_set VALUES('A,b,b,b');
INSERT INTO tab_set VALUES('m');

SELECT * FROM tab_set

USE books
SHOW DATABASES

	TINYINT  SMALLINT MEDIUMINT  INT  BIGINT 
字节        1      2         3        4      8

#如何只是无符号和有符号
#unsigned 设置为无符号
#超出范围的值就是临界值
DROP TABLE IF EXISTS tab_int;
CREATE TABLE tab_int(
	t1 INT(7) ZEROFILL ,
	t2 INT UNSIGNED
	
)
DESC tab_int

INSERT INTO tab_int VALUES(-1254)
INSERT INTO tab_int VALUES(-12454,-1545)
INSERT INTO tab_int VALUES(9999999999,-1545)
INSERT INTO tab_int VALUES(9,-1545)
SELECT * FROM tab_int

浮点型 会根据插入的精度决定精度
FLOAT(M,D)
DOUBLE(M,D)

定点型
DEC(M,D)
M代表的是整数部位加小数部位
D代表小数部位
如果超过就插入临界值

DROP TABLE IF EXISTS tab_float;
CREATE TABLE tab_float(
		fi FLOAT(5,2)
		,f2 DOUBLE(5,2),
		f3 DEC(5,2)
	)

INSERT INTO tab_float VALUES(
	1523.4,1523.4,1523.4
)
SELECT * FROM tab_float

字符型
CHAR
VARCHAR

TEXT
BLOB()

CREATE TABLE tab_char(
		c1 ENUM('a','b','c')#枚举
	
	
	
)

INSERT INTO tab_char VALUES('a');
INSERT INTO tab_char VALUES('b');
INSERT INTO tab_char VALUES('c');
INSERT INTO tab_char VALUES('A');
INSERT INTO tab_char VALUES('m');

SELECT * FROM tab_char

CREATE TABLE tab_set(
	s1 SET('a','b','c')
)

INSERT INTO tab_set VALUES('a');
INSERT INTO tab_set VALUES('a,b,c');
INSERT INTO tab_set VALUES('c,v');
INSERT INTO tab_set VALUES('A,b,b,b');
INSERT INTO tab_set VALUES('m');

SELECT * FROM tab_set

CREATE TABLE tab_date(
	t1 DATETIME,
	t2 TIMESTAMP
)
INSERT INTO tab_date VALUES(NOW(),NOW())

SELECT * FROM tab_date

SHOW VARIABLES LIKE 'time_zone'

SET time_zone='+8:00'
DATE 只保存日期
TIME 只保存时间
YEAR 只保存年

DATETIME  保存时间和日期   8字节   不受时区影响
TIMESTAMP 保存时间和日期   4字节   受时区影响

SELECT 列表
FROM 表
连接类型 JOIN 
ON 连接条件
WHERE 筛选条件
GROUP BY 分组
HAVING 筛选
ORDER BY 排序
LIMIT 分页


插入：
INSERT INTO 表名 VALUES 值
插入的类型和字段类型要一直或者兼容
只要保证值和类型一一对应
加入表中有NULL的字段可以：字段的值都不写或者值使用NULL
字段和值的个数必须一致
字段名可以省略 默认全部

INSERT INTO 表名 SET 字段=值......


插入多行
INSERT  INTO 表名【字段名...】 VALUES (值，...)（值...）
子查询：
INSERT INTO 表名 查询...

修改单表

UPDATE 表名 SET 字段=值，字段=值

UPDATE 表1  LEFT |RIGHT|INNER| 
ON 连接条件
SET 字段=值，字段=值
where....

删除：
删除单表DELETE FROM 表名 WHERE 

删除多表 级联删除：
DELETE 表1，表2 
 LEFT |RIGHT|INNER| 
ON 连接条件
SET 字段=值，字段=值
where....
limit....

TRUNCATE TABLE 表名

两种删除的区别
TRUNCATE 删除后，在插入标识列从1开始
DELETE 删除后，再插入标识列从短点开始

DELETE可以添加筛选
TRUNCATE没有返回值，不能回滚

创建库
CREATE DATABASE IF NOT EXISTS 库名 

修改库名
ALTER DATABASE 库名 

删除库
DROP DATABASE  IF EXISTS 库名

创建表
CREATE TABLE IF NOT EXISTS 表名（
字段名 字段类型。。。。。

）

添加列
ALTER TABLE 表名 ADD COLUMN 列名 类型【frist|AFTER字段名】

修改列的约束类型
ALTER TABLE 表名 MODIFY COLUMN 列名 新类型

修改列名
ALTER TABLE 表名 CHANGE COLUMN 旧名 新名 类型

删除列 
ALTER TABLE 表名 DROP COLUMN 列名

修改表名
ALTER TABLE 表名 RENAME 【TO】新名

删除表
DROP TABLE IF EXISTS 表名

复制表
复制表的结构
CREATE TABLE 新表 LIKE 旧表
复制表的类型加数据
CREATE TABLE 表名 SELECT 查询列表 FROM 旧表【WHERE ...】

数据类型
数值型
字符型
日期型


常见约束
CREATE TABLE biaoming(
	字段名 类型 约束
)

六大约束
非空约束 ：NOT NULL  用于保证该字段的值不能为空
默认值：DEFAULT 保证有默认值
主键： PRIMARY KEY 保证唯一性
唯一，可以玩空：UNIQUE 唯一性，可以为空
检查：CHECK（mysql不支持）
外健：FOREIGN KEY 限制两个表的关系，保证该字段值必须来自主表的关联列的值
			在从表添加约束，用于引用主表找中的值

在创建和修改表时添加

列级约束 ：六大约束语法上都支持，但外键约束没有效果
 
表级约束：除了非空、默认其他都支持

创建表时添加约束
添加列级约束
CREATE DATABASE students
USE students
CREATE TABLE stuinfo(
	id INT(15) PRIMARY KEY ,#主键,
	stuname VARCHAR(20) NOT NULL ,#非空，
	gender CHAR(1) CHECK(gender='男'OR gender='女'),
	seat INT UNIQUE ,#唯一,
	age INT DEFAULT 18 ,#默认
	majorid INT  REFERENCES major(id)
)
SELECT *FROM stuinfo
DESC stuinfo

CREATE TABLE major(
	id INT PRIMARY KEY ,
	majorname VARCHAR(20)
)

















































